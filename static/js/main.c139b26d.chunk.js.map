{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Api_key","App","state","getTZ","zip","document","getElementById","value","zone","tz","lookup","console","log","time","moment","format","setState","getWeather","fetch","then","response","status","json","data","city","name","timezone","theweather","weather","description","temp","Math","round","main","wind","speed","min","temp_min","max","temp_max","feelsLike","feels_like","className","type","id","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oSAOIA,EAAU,mCA6FCC,E,4MA1FbC,MAAQ,G,EACRC,MAAQ,WACN,IAAMC,EAAMC,SAASC,eAAe,OAAOC,MACrCC,EAAOC,IAAGC,OAAON,GACvBO,QAAQC,IAAIJ,GACZ,IAAMK,EAAOC,MAASL,GAAGD,GAAMO,OAAO,QACtCJ,QAAQC,IAAIC,GACZ,EAAKG,SAAS,CACZH,KAAMA,K,EAIVI,WAAa,WACX,IAAMb,EAAMC,SAASC,eAAe,OAAOC,MAC3CW,MACE,uDACEd,EACA,aACAJ,EACA,mBACFmB,MAAK,SAACC,GACkB,MAApBA,EAASC,OAIbD,EAASE,OAAOH,MAAK,SAACI,GACpBZ,QAAQC,IAAIW,GACZ,EAAKP,SAAS,CACZQ,KAAMD,EAAKE,KACXC,SAAUH,EAAKG,SACfC,WAAYJ,EAAKK,QAAQ,GAAGC,YAC5BC,KAAM,YAAcC,KAAKC,MAAMT,EAAKU,KAAKH,MAAQ,QACjDI,KAAMX,EAAKW,KAAKC,MAChBC,IAAKL,KAAKC,MAAMT,EAAKU,KAAKI,UAAY,QACtCC,IAAKP,KAAKC,MAAMT,EAAKU,KAAKM,UAAY,QACtCC,UAAW,eAAiBT,KAAKC,MAAMT,EAAKU,KAAKQ,YAAc,UAEjE,EAAKtC,WAfLQ,QAAQC,IAAIQ,EAASC,Y,uDAqBzB,OACE,6BACE,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,eAAb,sBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,2BAAOC,KAAK,OAAOC,GAAG,MAAMF,UAAU,cACtC,4BAAQE,GAAG,aAAaC,QAASC,KAAK7B,YAAtC,eAIA,yBAAKyB,UAAU,wCACb,yBAAKA,UAAU,OACb,wBAAIE,GAAG,sBAAsBF,UAAU,eACpCI,KAAK5C,MAAMsB,OAGhB,yBAAKkB,UAAU,kBACb,wBAAIE,GAAG,OAAOF,UAAU,cACrBI,KAAK5C,MAAMW,QAIlB,yBAAK6B,UAAU,8BACb,yBAAKA,UAAU,OACb,uBAAGA,UAAU,wBAAwBI,KAAK5C,MAAM4B,OAElD,yBAAKY,UAAU,kBACb,uBAAGE,GAAG,OAAOF,UAAU,2BACpBI,KAAK5C,MAAMsC,aAIlB,yBAAKE,UAAU,8BACb,uBAAGA,UAAU,cAAcI,KAAK5C,MAAMyB,uB,GAhFxCoB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASC,eAAe,SDyHpB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.c139b26d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"moment-timezone\";\nimport moment from \"moment\";\nimport format from \"moment\";\nimport tz from \"zipcode-to-timezone\";\n\nvar Api_key = \"98714695d6d6eca2461e95c2aa78b140\";\n\nclass App extends Component {\n  state = {}; //leave blank - argument that you pass through\n  getTZ = () => {\n    const zip = document.getElementById(\"zip\").value; //gets the value of the zip input from the input field\n    const zone = tz.lookup(zip); //uses \"zipcode-to-timezone\" to find hte timezone of the zip that has been fetched\n    console.log(zone);\n    const time = moment().tz(zone).format(\"LT z\");\n    console.log(time);\n    this.setState({\n      time: time,\n    });\n  };\n\n  getWeather = () => {\n    const zip = document.getElementById(\"zip\").value; //gets the value of the zip input from the input field\n    fetch(\n      \"https://api.openweathermap.org/data/2.5/weather?zip=\" +\n        zip +\n        \",us&appid=\" +\n        Api_key +\n        \"&units=imperial\" // gets the api data with the zip input and converts to imperial\n    ).then((response) => {\n      if (response.status !== 200) {\n        console.log(response.status);\n        return;\n      }\n      response.json().then((data) => {\n        console.log(data);\n        this.setState({\n          city: data.name,\n          timezone: data.timezone,\n          theweather: data.weather[0].description,\n          temp: \"Current: \" + Math.round(data.main.temp) + \"째F\",\n          wind: data.wind.speed,\n          min: Math.round(data.main.temp_min) + \"째F\",\n          max: Math.round(data.main.temp_max) + \"째F\",\n          feelsLike: \"Feels Like: \" + Math.round(data.main.feels_like) + \"째F\",\n        });\n        this.getTZ(); // calls the tz function so that it both will run when button is clicked\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row justify-content-center\">\n            <div className=\"card\">\n              <p className=\"card-header\">Whats the Weather?</p>\n              <div className=\"card-body\">\n                <div className=\"input\">\n                  <input type=\"text\" id=\"zip\" className=\"card-text\" />\n                  <button id=\"getWeather\" onClick={this.getWeather}>\n                    {/* on click of the button get \"this function's response\"*/}\n                    Get Weather\n                  </button>\n                  <div className=\"row justify-content-center text-dark\">\n                    <div className=\"col\">\n                      <h5 id=\"showWeatherForecast\" className=\"card-title \">\n                        {this.state.city}\n                      </h5>\n                    </div>\n                    <div className=\"col text-right\">\n                      <h6 id=\"time\" className=\"card-title\">\n                        {this.state.time}\n                      </h6>\n                    </div>\n                  </div>\n                  <div className=\"row justify-content-center\">\n                    <div className=\"col\">\n                      <p className=\"card-title text-info\">{this.state.temp}</p>\n                    </div>\n                    <div className=\"col text-right\">\n                      <p id=\"time\" className=\"card-title text-primary\">\n                        {this.state.feelsLike}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"row justify-content-center\">\n                    <p className=\"text-right\">{this.state.theweather}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}